apiVersion: v1
kind: Namespace
metadata:
  name: oauth2-proxy
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubeflow-m2m-oidc-configurator
  namespace: istio-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: oauth2-proxy
  namespace: oauth2-proxy
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kubeflow-m2m-oidc-configurator
  namespace: istio-system
rules:
- apiGroups:
  - security.istio.io
  resources:
  - requestauthentications
  verbs:
  - get
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubeflow-m2m-oidc-configurator
  namespace: istio-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubeflow-m2m-oidc-configurator
subjects:
- kind: ServiceAccount
  name: kubeflow-m2m-oidc-configurator
  namespace: istio-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: unauthenticated-oidc-viewer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:service-account-issuer-discovery
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:unauthenticated
---
apiVersion: v1
data:
  ISTIO_ROOT_NAMESPACE: istio-system
  KUBERNETES_API_SERVER_URL: https://kubernetes.default.svc
  REQUEST_AUTHENTICATION_NAME: m2m-token-issuer
kind: ConfigMap
metadata:
  name: kubeflow-m2m-oidc-configurator-envs-hkmccmbbb8
  namespace: istio-system
---
apiVersion: v1
data:
  script.sh: |
    #!/bin/sh
    set -e

    KUBERNETES_API_SERVER_URL="${KUBERNETES_API_SERVER_URL:-https://kubernetes.default.svc}"
    ISTIO_ROOT_NAMESPACE="${ISTIO_ROOT_NAMESPACE:-istio-system}"
    REQUEST_AUTHENTICATION_NAME="${REQUEST_AUTHENTICATION_NAME:-m2m-token-issuer}"

    RESOURCE_URL="\
    ${KUBERNETES_API_SERVER_URL}\
    /apis/security.istio.io/v1/namespaces/\
    ${ISTIO_ROOT_NAMESPACE}\
    /requestauthentications/\
    ${REQUEST_AUTHENTICATION_NAME}"

    wait_for_resource_ready() {
      while true; do
        response="$(
          curl -s -o /dev/null \
            --url "${RESOURCE_URL}" \
            -w "%{http_code}" \
            --header "Authorization: Bearer $(cat /run/secrets/kubernetes.io/serviceaccount/token)" \
            --insecure
        )"
        if [ "${response}" = "200" ]; then
          break
        fi
        sleep 5
      done
    }

    get_request_authentication_obj() {
      curl -s --request GET \
        --url "${RESOURCE_URL}" \
        --header "Authorization: Bearer $(cat /run/secrets/kubernetes.io/serviceaccount/token)" \
        --insecure
    }

    get_issuer_url_from_obj() {
      obj="${1}"
      echo "${obj}" | awk -F'"' '/"issuer":/ { print $4 }'
    }

    get_current_escaped_jwks_from_obj() {
      obj="${1}"
      echo "${obj}" | awk -F'"' '/"jwks":/' | sed -n 's/^.*"jwks": "\(.*\)".*$/\1/p'
    }

    get_jwks_uri() {
      issuer_url="${1}"
      curl -s --request GET \
          --url "${issuer_url}/.well-known/openid-configuration" \
          --header "Authorization: Bearer $(cat /run/secrets/kubernetes.io/serviceaccount/token)" \
          --insecure |
          grep -o '"jwks_uri":"https:\/\/[^"]\+"' |
          sed 's/"jwks_uri":"\(.*\)"/\1/'
      }

    get_jwks_from_uri() {
      jwks_uri="${1}"
      curl -s --request GET \
          --url "${jwks_uri}" \
          --header "Authorization: Bearer $(cat /run/secrets/kubernetes.io/serviceaccount/token)" \
          --insecure
    }

    # Format JWKS in a way that can be accepted in resource patch.
    parse_escaped_jwks() {
      jwks="${1}"
      echo "${jwks}" | sed 's/"/\\"/g'
    }

    are_jwks_equal() {
      jwks1="${1}"
      jwks2="${2}"
      test "$(echo "${jwks1}" | base64 -w0)" = "$(echo "${jwks2}" | base64 -w0)"
    }

    patch_request_authentication_with_escaped_jwks() {
      jwks_escaped="${1}"
      curl -s --request PATCH \
        --url "${RESOURCE_URL}" \
        --header "Content-Type: application/json-patch+json" \
        --header "Authorization: Bearer $(cat /run/secrets/kubernetes.io/serviceaccount/token)" \
        -d '[{ "op": "add", "path": "/spec/jwtRules/0/jwks", "value": "'"${jwks_escaped}"'" }]' \
        --insecure
        echo
    }

    patch_request_authentication_with_jwks_if_required() {
      echo "Getting RequestAuthentication object."
      REQUEST_AUTHENTICATION_OBJ="$(get_request_authentication_obj)"

      ISSUER_URL="$(get_issuer_url_from_obj "${REQUEST_AUTHENTICATION_OBJ}")"
      echo "Issuer Url in RequestAuthentication: ${ISSUER_URL}"

      CURRENT_JWKS_ESCAPED="$(get_current_escaped_jwks_from_obj "${REQUEST_AUTHENTICATION_OBJ}")"
      printf "Current Jwks (escaped):\n%s\n" "${CURRENT_JWKS_ESCAPED}"

      JWKS_URI="$(get_jwks_uri "${ISSUER_URL}")"
      echo "Jwks Uri from Well Known OpenID Configuration: ${JWKS_URI}"

      JWKS="$(get_jwks_from_uri "${JWKS_URI}")"
      JWKS_ESCAPED="$(parse_escaped_jwks "${JWKS}")"
      printf "JWKS from Well Known OpenID Configuration (escaped): \n%s\n" "${JWKS_ESCAPED}"

      if are_jwks_equal "${JWKS_ESCAPED}" "${CURRENT_JWKS_ESCAPED}"; then
        echo "JWKS in RequestAuthentication ${REQUEST_AUTHENTICATION_NAME} is configured correctly."
      else
        echo "JWKS in RequestAuthentication ${REQUEST_AUTHENTICATION_NAME} needs to be configured."
        patch_request_authentication_with_escaped_jwks "${JWKS_ESCAPED}"
      fi
    }

    verify_jwks_in_request_authentication() {
      REQUEST_AUTHENTICATION_OBJ="$(get_request_authentication_obj)"
      ISSUER_URL="$(get_issuer_url_from_obj "${REQUEST_AUTHENTICATION_OBJ}")"
      CURRENT_JWKS_ESCAPED="$(get_current_escaped_jwks_from_obj "${REQUEST_AUTHENTICATION_OBJ}")"
      JWKS_URI="$(get_jwks_uri "${ISSUER_URL}")"
      JWKS="$(get_jwks_from_uri "${JWKS_URI}")"
      JWKS_ESCAPED="$(parse_escaped_jwks "${JWKS}")"
      if ! are_jwks_equal "${JWKS_ESCAPED}" "${CURRENT_JWKS_ESCAPED}"; then
        echo "JWKS not properly configured, exit with error code 1"
        exit 1
      fi
    }

    main() {
      echo "Wait until resource RequestAuthentication ${REQUEST_AUTHENTICATION_NAME} in namespace ${ISTIO_ROOT_NAMESPACE} is ready."
      wait_for_resource_ready
      echo "Resource RequestAuthentication ${REQUEST_AUTHENTICATION_NAME} in namespace ${ISTIO_ROOT_NAMESPACE} is ready."

      echo "Patch RequestAuthentication with JWKS if required."
      patch_request_authentication_with_jwks_if_required

      echo "Wait 5 seconds before verifying RequestAuthentication JWKS configuration."
      sleep 5

      echo "Verify if RequestAuthentication is properly configured with JWKS..."
      verify_jwks_in_request_authentication
      echo "RequestAuthentication is properly configured with JWKS."
    }

    main
kind: ConfigMap
metadata:
  name: kubeflow-m2m-oidc-configurator-script-ffb7525m6d
  namespace: istio-system
---
apiVersion: v1
binaryData: {}
data:
  oauth2_proxy.cfg: |
    provider = "oidc"
    oidc_issuer_url = "http://dex.auth.svc.cluster.local:5556/dex"
    scope = "profile email groups openid"
    upstreams = "static://200"
    email_domains = [ "*" ]
    skip_auth_regex=["/dex/.*"]
    # ---
    # OIDC Discovery has to be skipped and login url has to be provided directly
    # in order to enable relative auth redirect.
    # Turning On OIDC Discovery would set the auth redirect location as the dex
    # Issuer URL which is http://dex.auth.svc.cluster.local:5556 in the default,
    # example installation. This address is usuallynot available through the Web
    # Browser. If you have a setup where dex has it's url as other than the
    # in-cluster service, this is optional.
    skip_oidc_discovery = true
    login_url = "/dex/auth"
    redeem_url = "http://dex.auth.svc.cluster.local:5556/dex/token"
    oidc_jwks_url = "http://dex.auth.svc.cluster.local:5556/dex/keys"
    # ---
    # Go to dex login page directly instead of showing the oauth2-proxy login
    # page.
    skip_provider_button = true
    # ---
    # Set Authorization Bearer response header. This is needed in order to
    # forward the Authorization Bearer token to Istio and enable authorization
    # based on JWT.
    set_authorization_header = true
    # ---
    # set X-Auth-Request-User, X-Auth-Request-Groups, X-Auth-Request-Email and
    # X-Auth-Request-Preferred-Username. This is optional for Kubeflow but you
    # may have other services that use standard auth headers.
    set_xauthrequest = true
    # ---
    cookie_name = "oauth2_proxy_kubeflow"
    # ---
    # Dex default cookie expiration is 24h. If set to 168h (default oauth2-proxy),
    # Istio will not be able to use the JWT after 24h but oauth2-proxy will still
    # consider the cookie valid.
    # It's possible to configure the JWT Refresh Token to enable longer login
    # session.
    cookie_expire = "24h"
    cookie_refresh = 0
    # ---
    code_challenge_method = "S256"
    # ---
    redirect_url = "/oauth2/callback"
    relative_redirect_url = true
kind: ConfigMap
metadata:
  labels:
    app: oauth2-proxy
  name: oauth2-proxy
  namespace: oauth2-proxy
---
apiVersion: v1
data:
  ALLOW_SELF_SIGNED_ISSUER: "true"
  ENABLE_M2M_TOKENS: "true"
  EXTRA_JWT_ISSUERS: https://kubernetes.default.svc.cluster.local=https://kubernetes.default.svc.cluster.local
  FORCE_HTTPS: "false"
kind: ConfigMap
metadata:
  name: oauth2-proxy-parameters-96md68mh6h
  namespace: oauth2-proxy
---
apiVersion: v1
data:
  M2M_TOKEN_ISSUER: https://kubernetes.default.svc.cluster.local
kind: ConfigMap
metadata:
  name: istio-m2m-params-mf4968849m
---
apiVersion: v1
data:
  client-id: a3ViZWZsb3ctb2lkYy1hdXRoc2VydmljZQ==
  client-secret: cFVCbkJPWTgwU25YZ2ppYlRZTTlaV056WTJ4cmVOR1Fvaw==
  cookie-secret: N2QxNmZlZTkyZjhkMTFiODk0MGIwODFiM2Y4YjhhY2I=
kind: Secret
metadata:
  name: oauth2-proxy-h675gf55ht
  namespace: oauth2-proxy
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  name: oauth2-proxy
  namespace: oauth2-proxy
spec:
  ports:
  - name: http
    port: 80
    targetPort: http
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: oauth2-proxy
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: oauth2-proxy
  name: oauth2-proxy
  namespace: oauth2-proxy
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: oauth2-proxy
  template:
    metadata:
      labels:
        app.kubernetes.io/name: oauth2-proxy
    spec:
      containers:
      - args:
        - --http-address=0.0.0.0:4180
        - --config=/etc/oauth2_proxy/oauth2_proxy.cfg
        env:
        - name: OAUTH2_PROXY_CLIENT_ID
          valueFrom:
            secretKeyRef:
              key: client-id
              name: oauth2-proxy-h675gf55ht
        - name: OAUTH2_PROXY_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              key: client-secret
              name: oauth2-proxy-h675gf55ht
        - name: OAUTH2_PROXY_COOKIE_SECRET
          valueFrom:
            secretKeyRef:
              key: cookie-secret
              name: oauth2-proxy-h675gf55ht
        - name: OAUTH2_PROXY_COOKIE_SECURE
          valueFrom:
            configMapKeyRef:
              key: FORCE_HTTPS
              name: oauth2-proxy-parameters-96md68mh6h
        - name: OAUTH2_PROXY_SSL_INSECURE_SKIP_VERIFY
          valueFrom:
            configMapKeyRef:
              key: ALLOW_SELF_SIGNED_ISSUER
              name: oauth2-proxy-parameters-96md68mh6h
        - name: OAUTH2_PROXY_SKIP_JWT_BEARER_TOKENS
          valueFrom:
            configMapKeyRef:
              key: ENABLE_M2M_TOKENS
              name: oauth2-proxy-parameters-96md68mh6h
        - name: OAUTH2_PROXY_EXTRA_JWT_ISSUERS
          valueFrom:
            configMapKeyRef:
              key: EXTRA_JWT_ISSUERS
              name: oauth2-proxy-parameters-96md68mh6h
        image: quay.io/oauth2-proxy/oauth2-proxy:v7.6.0
        livenessProbe:
          httpGet:
            path: /ping
            port: http
            scheme: HTTP
        name: oauth2-proxy
        ports:
        - containerPort: 4180
          name: http
          protocol: TCP
        - containerPort: 44180
          name: metrics
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /ping
            port: http
            scheme: HTTP
        resources: {}
        volumeMounts:
        - mountPath: /etc/oauth2_proxy/oauth2_proxy.cfg
          name: configmain
          subPath: oauth2_proxy.cfg
      volumes:
      - configMap:
          defaultMode: 420
          name: oauth2-proxy
        name: configmain
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: kubeflow-m2m-oidc-configurator
  namespace: istio-system
spec:
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 3
      template:
        metadata:
          labels: {}
        spec:
          containers:
          - command:
            - /script.sh
            envFrom:
            - configMapRef:
                name: kubeflow-m2m-oidc-configurator-envs-hkmccmbbb8
            image: docker.io/curlimages/curl
            name: kubeflow-m2m-oidc-configurator
            resources: {}
            volumeMounts:
            - mountPath: /script.sh
              name: script
              subPath: script.sh
          restartPolicy: OnFailure
          serviceAccountName: kubeflow-m2m-oidc-configurator
          volumes:
          - configMap:
              defaultMode: 511
              items:
              - key: script.sh
                path: script.sh
              name: kubeflow-m2m-oidc-configurator-script-ffb7525m6d
            name: script
      ttlSecondsAfterFinished: 600
  schedule: '*/5 * * * *'
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: istio-ingressgateway-oauth2-proxy
  namespace: istio-system
spec:
  action: CUSTOM
  provider:
    name: oauth2-proxy
  rules:
  - {}
  selector:
    matchLabels:
      app: istio-ingressgateway
---
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: dex-jwt
  namespace: istio-system
spec:
  jwtRules:
  - forwardOriginalToken: true
    issuer: http://dex.auth.svc.cluster.local:5556/dex
    outputClaimToHeaders:
    - claim: email
      header: kubeflow-userid
    - claim: groups
      header: kubeflow-groups
---
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: m2m-token-issuer
  namespace: istio-system
spec:
  jwtRules:
  - forwardOriginalToken: true
    issuer: https://kubernetes.default.svc.cluster.local
    outputClaimToHeaders:
    - claim: sub
      header: x-auth-request-user
    - claim: sub
      header: kubeflow-userid
